/*
   GENERIC CODE (parametric on the number of limbs)
*/

#ifndef JASMIN_BN_GENERIC
#define JASMIN_BN_GENERIC

#ifndef NLIMBS
param int nlimbs = 4;
#define NLIMBS
#endif

/* Loads an array from memory
 */
inline fn bn_load
( reg u64 a
) -> reg u64[nlimbs]
{
  inline int i;
  reg u64[nlimbs] x;

  for i = 0 to nlimbs {
    x[i] = [a + 8*i];
  }

  return x;
}

/* Stores a bignum into memory */
inline fn bn_store
( reg u64 a,
  reg u64[nlimbs] b
)
{
  inline int i;

  for i = 0 to nlimbs {
    [a + 8*i] = b[i];
  }
}

/* Loads an array from memory
 */
inline fn bn2_load
( reg u64 a
) -> reg u64[2*nlimbs]
{
  inline int i;
  reg u64[2*nlimbs] x;

  for i = 0 to 2*nlimbs {
    x[i] = [a + 8*i];
  }

  return x;
}

/* Stores a bignum into memory */
inline fn bn2_store
( reg u64 a,
  reg u64[2*nlimbs] b
)
{
  inline int i;

  for i = 0 to 2*nlimbs {
    [a + 8*i] = b[i];
  }
}

/* unpack a double bignum into two bignums */
inline fn bn2_unpack
( reg u64[2*nlimbs] a
) -> reg u64[nlimbs], reg u64[nlimbs]
{
  inline int i;
  reg u64[nlimbs] hi lo;

  for i = 0 to nlimbs {
    lo[i] = a[i];
    hi[i] = a[nlimbs + i];
  }

  return hi, lo;
}

/* pack two bignums into a double bignum */
inline fn bn_pack2
( reg u64[nlimbs] lo hi
) -> reg u64[2*nlimbs]
{
  inline int i;
  reg u64[2*nlimbs] r;

  for i = 0 to nlimbs {
    r[i] = lo[i];
  }
  for i = 0 to nlimbs {
    r[nlimbs+i] = hi[i];
  }

  return r;
}

/**
 * Compares two field elements.
 * If a == b, return 1. Otherwise, return 0.
 */
inline fn bn_eq
( reg u64[nlimbs] a b
) -> reg u64 // 0 or 1
{
  inline int i;
  reg u64 acc are_equal t res;
  reg bool zf;

  res = 0;
  are_equal = 1;
  acc = 0;
  for i = 0 to nlimbs {
    t = a[i];
    t ^= b[i];
    acc |= t;
  }
  (_, _, _, _, zf, _) = #AND(acc, acc);
  res = are_equal if zf;
    
  return res;
}

/**
 * Checks if a bignum is zero.
 * If a == 0, return 1. Otherwise, return 0.
 */
inline fn bn_test0(reg u64[nlimbs] a) -> reg u64 {
  inline int i;
  reg u64 acc is_zero res;
  reg bool zf;

  res = 0;
  is_zero = 1;    
  acc = a[0];
  for i = 1 to nlimbs {
    acc |= a[i];
  }
  (_, _, _, _, zf, _) = #AND(acc, acc);
  res = is_zero if zf;

  return res;
}

/* copy a bignum */
inline fn bn_copy(reg u64[nlimbs] a) -> reg u64[nlimbs] {
  inline int i;
  reg u64 t;
  reg u64[nlimbs] r;
    
  for i = 0 to nlimbs {
    t = a[i];
    r[i] = t;
  }
    
  return r;
}

/* conditional move bignum [b] into [a] "cond ? b : a" */
inline fn bn_cmov(reg bool cond, reg u64[nlimbs] a b) -> reg u64[nlimbs] {
  inline int i;
    
  for i = 0 to nlimbs {
    a[i] = b[i] if cond;
  }
    
  return a;
}

/* zeroing a bignum */
inline fn bn_set0(reg u64[nlimbs] a) -> reg u64[nlimbs] {
  inline int i;
    
  for i = 0 to nlimbs {
    a[i] = 0;
  }
    
  return a;
}

/* add a digit and propagate carry */
/* REGS (params + workspace): (nlimbs+2) + 0 (inplace 1st arg.) */
inline fn bn_add1
( reg u64[nlimbs] a,
  reg u64 b
) -> reg bool, reg u64[nlimbs]
{
  inline int i;
  reg bool cf;

  cf, a[0] += b;
  for i=1 to nlimbs
  { cf, a[i] += 0 + cf; }

  return cf, a;
}

/* performs multi-limb addition */
/* REGS (params + workspace): 2*nlimbs + 0 (inplace 1st arg.) */
inline fn bn_addc
( reg u64[nlimbs] a b
) -> reg bool, reg u64[nlimbs]
{
  inline int i;
  reg bool cf;

  cf, a[0] += b[0];
  for i=1 to nlimbs
  { cf, a[i] += b[i] + cf; }

  return cf, a;
}

/* performs multi-limb subtraction */
/* REGS (params + workspace): 2*nlimbs + 0 (inplace 1st arg.) */
inline fn bn_subc
( reg u64[nlimbs] a b
) -> reg bool, reg u64[nlimbs]
{
  inline int i;
  reg bool cf;

  cf, a[0] -= b[0];
  for i=1 to nlimbs
  { cf, a[i] -= b[i] - cf; }

  return cf, a;
}

/* multiplies a scalar by a reg array (first iteration of mul) */
/* REGS (params + workspace): (1+nlimbs) + (nlimbs+2) */
inline fn mul1
( reg u64 a,
  reg u64[nlimbs] b
) -> reg u64, reg bool, reg bool, reg u64[2*nlimbs]
{
  inline int i;
  reg bool of, cf;
  reg u64 _zero, lo, a0;
  reg u64[2*nlimbs] r;

  of, cf, _, _, _, _zero = #set0();

  r[1], r[0] = #MULX ( a, b[0] );

  for i = 1 to nlimbs {
    r[i+1], lo = #MULX ( a, b[i] );
    cf, r[i] = #ADCX ( r[i], lo, cf );
  }

  cf, r[nlimbs] = #ADCX ( r[nlimbs], _zero, cf );
  // cf = 0

  return _zero, of, cf, r;
}

/* multiplies a (shifted) scalar by a reg array (remaining iterations of mul) */
/* REGS (params + workspace):  */
inline fn mul1acc
( inline int k,
  reg u64 a,
  reg u64[nlimbs] b,
  reg u64[2*nlimbs] r,
  reg u64 _zero, // should be set to 0
  reg bool of cf // should be set to 0
) -> reg u64, reg bool, reg bool, reg u64[2*nlimbs]
{
  inline int i;
  reg u64 ak hi lo;

  for i = 0 to nlimbs-1 {
    hi, lo = #MULX ( a, b[i] ); 
    of, r[k+i] = #ADOX ( r[k+i], lo, of );
    cf, r[k+i+1] = #ADCX ( r[k+i+1], hi, cf );
  }

  r[nlimbs+k], lo = #MULX ( a, b[nlimbs-1] ); // a is now dead!
  of, r[nlimbs+k-1] = #ADOX ( r[nlimbs+k-1], lo, of );

  cf, r[nlimbs+k] = #ADCX ( r[nlimbs+k], _zero, cf);
  of, r[nlimbs+k] = #ADOX ( r[nlimbs+k], _zero, of);
  // cf = 0, of = 0

  return _zero, of, cf, r;
}

inline fn mul1first_2
( reg ptr u64[nlimbs] a,
  reg u64[nlimbs] b
) -> reg u64, reg bool, reg bool, reg u64[2*nlimbs]
{
  inline int i;
  reg bool of, cf;
  reg u64 _zero, lo, a0;
  reg u64[2*nlimbs] r;

  of, cf, _, _, _, _zero = #set0();

  a0 = a.[0];

  r[1], r[0] = #MULX ( a0, b[0] );

  for i = 1 to nlimbs {
    r[i+1], lo = #MULX ( a0, b[i] );
    cf, r[i] = #ADCX ( r[i], lo, cf );
  }

  cf, r[nlimbs] = #ADCX ( r[nlimbs], _zero, cf );
  // cf = 0

  return _zero, of, cf, r;
}

/* multiplies a (shifted) scalar by a reg array (remaining iterations of mul) */
/* REGS (params + workspace):  */
inline fn mul1acc_2
( inline int k,
  reg ptr u64[nlimbs] a,
  reg u64[nlimbs] b,
  reg u64[2*nlimbs] r,
  reg u64 _zero, // should be set to 0
  reg bool of cf // should be set to 0
) -> reg u64, reg bool, reg bool, reg u64[2*nlimbs]
{
  inline int i;
  reg u64 ak hi lo;

  ak = a.[k];

  for i = 0 to nlimbs-1 {
    hi, lo = #MULX ( ak, b[i] ); 
    of, r[k+i] = #ADOX ( r[k+i], lo, of );
    cf, r[k+i+1] = #ADCX ( r[k+i+1], hi, cf );
  }

  r[nlimbs+k], lo = #MULX ( ak, b[nlimbs-1] ); // ak is now dead!
  of, r[nlimbs+k-1] = #ADOX ( r[nlimbs+k-1], lo, of );

  cf, r[nlimbs+k] = #ADCX ( r[nlimbs+k], _zero, cf);
  of, r[nlimbs+k] = #ADOX ( r[nlimbs+k], _zero, of);
  // cf = 0, of = 0

  return _zero, of, cf, r;
}

/* full multiplication (first arg. as a reg_ptr) */
inline fn bn_muln
( reg ptr u64[nlimbs] a, //reg u64 fptr,
  reg u64[nlimbs] b
) -> reg u64, reg bool, reg bool, reg u64[2*nlimbs]
{
  inline int i;
  reg bool of cf;
  reg u64 _zero ai;
  reg u64[2*nlimbs] r;

  ai = a[0];
  _zero, of, cf, r = mul1(ai, b);

  for i = 1 to nlimbs {
    ai = a[i];
    _zero, of, cf, r = mul1acc(i, ai, b, r, _zero, of, cf);
  }
  return _zero, of, cf, r;
}

#ifdef BN_GENERIC_EXPORT

export fn __addc( reg u64 rp ap bp ) { 
  reg u64 rp2;
  reg u64[nlimbs] a b;
  a = bn_load(ap);
  b = bn_load(bp);
  // relax ABI contraints
  rp2 = rp;
  a = bn_addc(a, b);
  bn_store(rp2, a);
}

export fn __subc( reg u64 rp ap bp ) { 
  reg u64 rp2;
  reg u64[nlimbs] a b;
  a = bn_load(ap);
  b = bn_load(bp);
  // relax ABI contraints
  rp2 = rp;
  a = bn_subc(a, b);
  bn_store(rp2, a);
}

export fn __muln( reg u64 rp ap bp ) { 
  stack u64 rp2;
  reg u64[nlimbs] a b;
  reg u64[2*nlimbs] r;
  stack u64[nlimbs] a_s;
  stack u64 rp_s;

  rp_s = rp;
  a = bn_load(ap);
  a_s = a;
  b = bn_load(bp);
  rp2 = rp;
  _, _, _, r = bn_muln(a_s, b);
  rp = rp2;
  bn2_store(rp, r);
}

export fn __eq( reg u64 ap bp ) -> reg u64 { 
  reg u64 r;
  reg u64[nlimbs] a b;
  a = bn_load(ap);
  b = bn_load(bp);
  r = bn_eq( a, b );
  return r;
}

export fn __test0( reg u64 ap ) -> reg u64 { 
  reg u64 r;
  reg u64[nlimbs] a;
  a = bn_load(ap);
  r = bn_test0( a );
  return r;
}

#endif
// end: BN_GENERIC_EXPORT

#ifdef BN_GENERIC_TOEC

inline fn toEC() {
  
}

#endif
// end: BN_GENERIC_TOEC

#endif
// end: JASMIN_BN_GENERIC
