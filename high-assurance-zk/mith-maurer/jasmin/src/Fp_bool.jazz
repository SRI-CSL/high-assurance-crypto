/*
   SPECIFIC CODE FOR SMALL-MODULUS (64bit) 
*/

#ifndef JASMIN_BN_BOOL
#define JASMIN_BN_BOOL


/* @requires: 0 <= a,b < 2
   @ensures: res = (a+b)%2 */
inline fn addm( reg u64 a b ) -> reg u64 {
  a ^= b;
  return a;
}

/* @requires: 0 <= a,b < 2
   @ensures: res = (a-b)%2 */
inline fn subm( reg u64 a b ) -> reg u64 {
  a ^= b;
  return a;
}

/* @requires: 0 <= a,b < 2
   @ensures: res = (a*b)%2 */
inline fn mulm( reg u64 a b ) -> reg u64 {
  a &= b;
  return a;
}



#ifdef BN_BOOL_EXPORT
export fn __addm( reg u64 p a b ) -> reg u64 { 
  reg u64 _p, _a, _b, _r, r;
  _a = a;
  _b = b;
  _p = p;
  _r = addm(_p, _a, _b);
  r = _r;
  return r;
}

export fn __subm( reg u64 p a b ) -> reg u64 { 
  reg u64 _p, _a, _b, _r, r;
  _a = a;
  _b = b;
  _p = p;
  _r = subm(_p, _a, _b);
  r = _r;
  return r;
}

export fn __mulm( reg u64 p a b ) -> reg u64 { 
  reg u64 _p, _a, _b, _r, r;
  _a = a;
  _b = b;
  _p = p;
  _r = mulm(_p, _a, _b);
  r = _r;
  return r;
}

#endif
// end: BN_BOOL_EXPORT

#ifdef BN_BOOL_TOEC
// export all modular operations to EC
inline fn toEC()
{
  reg u64 a b r;
  /* normalized versions */
  r = addm(a, b);
  r = subm(a, b);
  r = mulm(a, b);
}
#endif
// end: BN_BOOL_TOEC


#endif
//end: JASMIN_BN_BOOL
